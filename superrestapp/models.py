from django.db import models
from django.core.validators import MinLengthValidator

class User(models.Model):
    user_id = models.AutoField(primary_key=True)
    username = models.CharField(max_length=100, null=True, blank=True, validators=[MinLengthValidator(5)])
    user_email = models.EmailField(max_length=254, null=True, blank=True)
    password = models.CharField(max_length=100, null=True, blank=True, validators=[MinLengthValidator(8)])
    first_name = models.CharField(max_length=100, null=True, blank=True)
    last_name = models.CharField(max_length=100, null=True, blank=True)
    address = models.CharField(max_length=300, null=True, blank=True)
    address_proof = models.ImageField(null=True, blank=True)
    date_of_birth = models.DateField(null=True, blank=True)
    created_on = models.DateField(null=True, blank=True)
    #user_created_by = models.ForeignKey('self', on_delete =models.CASCADE, related_name = 'user_created_by_id')
    #user_updated_by = models.ForeignKey('self', on_delete =models.CASCADE, related_name = 'user_updated_by_id')
    updated_on = models.DateField(null=True, blank=True)
    profile_completed_status = models.BooleanField(default=False)                
class Organization(models.Model):
    organization_id=models.AutoField(primary_key=True)
    organization_name=models.CharField(max_length=100, null=True, blank=True)
    organization_email=models.CharField(max_length=254, null=True, blank=True)
    organization_address= models.CharField(max_length=100, null=True, blank=True)
    organization_logo = models.ImageField(null=True, blank=True)
    organization_created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name ='created_by')
    organization_updated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name ='updated_by')
    organization_created_on = models.DateField(null=True, blank=True)
    organization_updated_on = models.DateField(null=True, blank=True)
    organization_status=models.BooleanField(default=False)
    organization_users = models.ManyToManyField(User,related_name='organization_users',blank=True)
class Project(models.Model):
    project_id=models.AutoField(primary_key=True)
    project_name=models.CharField(max_length=100, null=True, blank=True)
    organization_project_id=models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='organization_project_id')
    project_type = models.CharField(max_length=100, null=True, blank=True)
    project_location = models.CharField(max_length=100, null=True, blank=True)
    project_status = models.BooleanField(default=False)
    project_description = models.CharField(max_length=100, null=True, blank=True)
    project_created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name ='project_created_by')
    project_updated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='project_updated_by')
    project_created_on = models.DateField(null=True, blank=True)
    project_updated_on = models.DateField(null=True, blank=True)
    project_users = models.ManyToManyField(User,related_name='project_users',blank=True)

class User_Role(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    project = models.ForeignKey(Project, on_delete=models.CASCADE)
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE)
    role = models.CharField(max_length=100, null=True, blank=True)
class Store(models.Model):
    store_id = models.AutoField(primary_key=True)
    store_name = models.CharField(max_length=100, null=True, blank=True)
    store_organization_id = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='store_organization_id')
    store_project_id = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='store_project_id')
    store_location= models.CharField(max_length=100, null=True, blank=True)
    created_on = models.DateField(null=True, blank=True)
    store_created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='store_created_by')    
    updated_on = models.DateField(null=True, blank=True)
    store_updated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='store_updated_by')
    store_users= models.ManyToManyField(User,related_name='store_users',blank=True)

class Plan(models.Model):
    plan_id = models.AutoField(primary_key=True)
    plan_name = models.CharField(max_length=100, null = True, blank = True)
    plan_description = models.CharField(max_length=100, null = True, blank = True)
    plan_template =  models.CharField(max_length=100, null = True, blank = True)
    plan_project_id = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='plan_project_id')
    plan_organization_id = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='plan_organization_id')
    plan_created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='plan_created_by')
    plan_updated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='plan_updated_by')
# To be Migrated
class Task(models.Model):
    task_id= models.AutoField(primary_key=True)
    task_project_id = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='task_project_id')
    task_organization_id = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='task_organization_id')
    task_plan_id = models.ForeignKey(Plan, on_delete=models.CASCADE, related_name='task_plan_id')
    task_name = models.CharField(max_length=100, null = True, blank =True)
    task_startnode =  models.CharField(max_length=100, null = True, blank =True)
    task_endnode = models.CharField(max_length=100, null = True, blank =True)
    task_type = models.CharField(max_length=100, null = True, blank =True)
    task_created_on = models.DateField(null=True, blank=True)
    task_created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='task_created_by')
    task_updated_on = models.DateField(null=True, blank=True)
    task_updated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='task_updated_by') 
    task_status = models.CharField(max_length=100, null = True, blank =True)   

class CCBreakingActivity(models.Model):
    ccbreaking_activity_id = models.AutoField(primary_key=True)
    cc_task_id= models.ForeignKey(Task, on_delete= models.CASCADE, related_name = 'cc_task_id')
    ccbreaking_activity_name = models.CharField(max_length=100, null = True, blank =True)
    ccb_pipeline_trench_500_status = models.CharField(max_length=100, null = True, blank =True)   #completed, ongoing, notstarted, not applicable 
    ccb_mharea_status = models.CharField(max_length=100, null = True, blank =True)
    ccb_upvc_350 = models.CharField(max_length=100, null = True, blank =True)
    ccb_IC_500 = models.CharField(max_length=100, null = True, blank =True)    
    started_on = models.DateField(null=True, blank=True)
    status = models.CharField(max_length=100, null = True, blank =True)
    completed_on = models.DateField(null=True, blank=True)

class PipeLineActivity(models.Model):
    pipeline_activity_id = models.AutoField(primary_key=True)
    pipe_task_id= models.ForeignKey(Task, on_delete= models.CASCADE, related_name = 'pipe_task_id')
    pipeline_activity_name = models.CharField(max_length=100, null = True, blank =True)
    trenching_pipeline = models.CharField(max_length=100, null = True, blank =True)   #completed, ongoing, notstarted, not applicable 
    bedding = models.CharField(max_length=100, null = True, blank =True)
    laying = models.CharField(max_length=100, null = True, blank =True)
    pipe_jointing = models.CharField(max_length=100, null = True, blank =True)
    back_filling = models.CharField(max_length=100, null = True, blank =True)
    started_on = models.DateField(null=True, blank=True)
    status = models.CharField(max_length=100, null = True, blank =True)
    completed_on = models.DateField(null=True, blank=True)
    
class ManholeActivity(models.Model):
    manhole_activity_id = models.AutoField(primary_key=True)
    mh_task_id= models.ForeignKey(Task, on_delete= models.CASCADE, related_name = 'mh_task_id')
    manhole_activity_name = models.CharField(max_length=100, null = True, blank =True)
    excavation = models.CharField(max_length=100, null = True, blank =True)
    removal_excess_soil= models.CharField(max_length=100, null = True, blank =True)
    dust_fill_PCC_below = models.CharField(max_length=100, null = True, blank =True)
    base_erection = models.CharField(max_length=100, null = True, blank =True)
    pipe_mhbase_connection = models.CharField(max_length=100, null = True, blank =True)
    haunching = models.CharField(max_length=100, null = True, blank =True)
    raiser_erection = models.CharField(max_length=100, null = True, blank =True)
    cone_erection = models.CharField(max_length=100, null = True, blank =True)
    fix_UPVC = models.CharField(max_length=100, null = True, blank =True)
    back_filling= models.CharField(max_length=100, null = True, blank =True)
    started_on = models.DateField(null=True, blank=True)
    status = models.CharField(max_length=100, null = True, blank =True)
    completed_on = models.DateField(null=True, blank=True)

class RoadRestorationActivity(models.Model):
    restoration_activity_id = models.AutoField(primary_key=True)
    rr_task_id= models.ForeignKey(Task, on_delete= models.CASCADE, related_name = 'rr_task_id')
    restoration_activity_name = models.CharField(max_length=100, null = True, blank =True)
    fill_with_dust = models.CharField(max_length=100, null = True, blank =True)
    fill_with_concrete = models.CharField(max_length=100, null = True, blank =True)
    below_road_300 = models.CharField(max_length=100, null = True, blank =True)
    pcc_200_mh = models.CharField(max_length=100, null = True, blank =True)
    pcc_200_pl = models.CharField(max_length=100, null = True, blank =True)
    vcc_pl_200 =models.CharField(max_length=100, null = True, blank =True)
    vcc_UPVC_200 = models.CharField(max_length=100, null = True, blank =True)
    vcc_IC_100 = models.CharField(max_length=100, null = True, blank =True)
    started_on = models.DateField(null=True, blank=True)
    status = models.CharField(max_length=100, null = True, blank =True)
    completed_on = models.DateField(null=True, blank=True)

class HSCActivity(models.Model):
    hsc_activity_id = models.AutoField(primary_key=True)
    hsc_task_id= models.ForeignKey(Task, on_delete= models.CASCADE, related_name = 'hsc_task_id')
    hsc_activity_name = models.CharField(max_length=100, null = True, blank =True)
    excavation_for_IC =models.CharField(max_length=100, null = True, blank =True)
    PCC_below_IC = models.CharField(max_length=100, null = True, blank =True)
    erection_IC = models.CharField(max_length=100, null = True, blank =True)
    dust_filling = models.CharField(max_length=100, null = True, blank =True)
    started_on = models.DateField(null=True, blank=True)
    status = models.CharField(max_length=100, null = True, blank =True)
    completed_on = models.DateField(null=True, blank=True)

class HouseKeepingActivity(models.Model):
    housekeeping_activity_id = models.AutoField(primary_key=True)
    hk_task_id= models.ForeignKey(Task, on_delete= models.CASCADE, related_name = 'hk_task_id')
    housekeeping_activity_name = models.CharField(max_length=100, null = True, blank =True)
    started_on = models.DateField(null=True, blank=True)
    status = models.CharField(max_length=100, null = True, blank =True)
    completed_on = models.DateField(null=True, blank=True)    
class AssignActivity(models.Model):    
    assigned_activity_id = models.AutoField(primary_key=True)
    assign_task_id= models.ForeignKey(Task, on_delete= models.CASCADE, related_name = 'assign_task_id')
    activity_type_id = models.IntegerField(blank=True, null=True)
    assigned_by = models.CharField(max_length=100, null = True, blank =True)
    assigned_on = models.CharField(max_length=100, null = True, blank =True)
    assigned_to = models.CharField(max_length=100, null = True, blank =True)
    estimated_timeline = models.CharField(max_length=100, null = True, blank =True)
    skilled_man_power =models.CharField(max_length=100, null = True, blank =True)
    skilled_man_hours = models.CharField(max_length=100, null = True, blank =True)
    unskilled_man_power = models.CharField(max_length=100, null = True, blank =True)
    unskilled_man_hours =  models.CharField(max_length=100, null = True, blank =True)
    jcb_quantity = models.CharField(max_length=100, null = True, blank =True)
    jcb_hours = models.CharField(max_length=100, null = True, blank =True)
    tractor_quantity = models.CharField(max_length=100, null = True, blank =True)
    tracktor_hours = models.CharField(max_length=100, null = True, blank =True)
    hydra_quantity = models.CharField(max_length=100, null = True, blank =True)
    hydra_hours = models.CharField(max_length=100, null = True, blank =True)
    water_tanker_quantity = models.CharField(max_length=100, null = True, blank =True)
    water_tanker = models.CharField(max_length=100, null = True, blank =True)
    tractor_compressor_quantity = models.CharField(max_length=100, null = True, blank =True)
    tractor_compressor_hours =     models.CharField(max_length=100, null = True, blank =True)
    other_machine_quantity = models.CharField(max_length=100, null = True, blank =True)  
    other_machine_hours =     models.CharField(max_length=100, null = True, blank =True)

class Report_Activity(models.Model):
    reported_activity_id = models.AutoField(primary_key=True)
    report_task_id= models.ForeignKey(Task, on_delete= models.CASCADE, related_name = 'report_task_id')
    assigned_task_id= models.ForeignKey(AssignActivity, on_delete= models.CASCADE, related_name = 'assigned_task_id')        
    activity_type_id = models.IntegerField(blank=True, null=True)
    reported_by = models.CharField(max_length=100, null = True, blank =True)
    reported_on = models.CharField(max_length=100, null = True, blank =True)
    finish_timeline = models.CharField(max_length=100, null = True, blank =True)
    skilled_man_power =models.CharField(max_length=100, null = True, blank =True)
    skilled_man_hours = models.CharField(max_length=100, null = True, blank =True)
    unskilled_man_power = models.CharField(max_length=100, null = True, blank =True)
    unskilled_man_hours =  models.CharField(max_length=100, null = True, blank =True)
    jcb_quantity = models.CharField(max_length=100, null = True, blank =True)
    jcb_hours = models.CharField(max_length=100, null = True, blank =True)
    tractor_quantity = models.CharField(max_length=100, null = True, blank =True)
    tracktor_hours = models.CharField(max_length=100, null = True, blank =True)
    hydra_quantity = models.CharField(max_length=100, null = True, blank =True)
    hydra_hours = models.CharField(max_length=100, null = True, blank =True)
    water_tanker_quantity = models.CharField(max_length=100, null = True, blank =True)
    water_tanker = models.CharField(max_length=100, null = True, blank =True)
    tractor_compressor_quantity = models.CharField(max_length=100, null = True, blank =True)
    tractor_compressor_hours =     models.CharField(max_length=100, null = True, blank =True)
    other_machine_quantity = models.CharField(max_length=100, null = True, blank =True)
    other_machine_hours =     models.CharField(max_length=100, null = True, blank =True)
    report_status = models.CharField(max_length=100, null = True, blank =True)
    

# Till Here
class Otp(models.Model):
    email = models.CharField(max_length=100, null=True, blank=True)
    otp = models.CharField(max_length=100, null=True, blank=True)
    created_at = models.DateField()
